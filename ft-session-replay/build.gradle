apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

apply plugin: 'maven-publish'


def versionNameStr = "0.1.0-alpha.01"

android {
    namespace 'com.ft.sdk.sessionreplay'
    compileSdk 34

    defaultConfig {
        minSdk 21

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


}

dependencies {

    implementation 'com.google.code.gson:gson:2.10.1'
    compileOnly 'com.google.android.material:material:1.1.0'
    compileOnly 'com.squareup.okhttp3:okhttp:4.5.0'
    compileOnly 'androidx.fragment:fragment:1.8.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

afterEvaluate {
    publishing {
        publications {
            mavenAar(MavenPublication) {
                groupId 'com.cloudcare.ft.mobile.sdk.tracker.agent'
                artifactId 'ft-session-replay'
                version versionNameStr
                artifact project.tasks.bundleReleaseAar
                // 添加源码Javadoc到发布的AAR文件中
                artifact androidJavadocsJar
                artifact androidSourcesJar

            }
        }
        repositories {
            maven {

                def releasesRepoUrl = "$maven_publish_url/maven-releases"
                def snapshotsRepoUrl = "$maven_publish_url/maven-snapshots"
                url = versionNameStr.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                credentials {
                    username = getDefaultProperties().get("LDAP_ACCOUNT")
                    password = getDefaultProperties().get("LDAP_PWD")
                }
            }


        }
    }
}

/**
 * 报错，不影响上传任务
 */
task androidJavadocs(type: Javadoc) {

    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            //BuildConfig Class Not Found
            source += variant.javaCompileProvider.get().source
            //Dependencies  Library Class Not Found
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
    exclude '**/R.html', '**/R.*.html', '**/index.html'
    //ignore doc lint
    options.addStringOption('Xdoclint:none', '-quiet')
    //ignore build fail
    failOnError false
}

task androidJavadocsJar(type: Jar) {
    dependsOn androidJavadocs
    archiveClassifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}